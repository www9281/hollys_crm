--------------------------------------------------------
--  DDL for Function GET_STORAGE_9I
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "CRMDEV"."GET_STORAGE_9I" 
  ( V_OWNER VARCHAR2, V_TNAME VARCHAR2, V_PNAME VARCHAR2)
RETURN VARCHAR2 IS
     LONG_CHAR   VARCHAR2(4000) := '';
  BEGIN

SELECT CHR(10)||'TABLESPACE '||TABLESPACE_NAME||CHR(10)||  -- TABLE STORAGE
       'PCTFREE '||PCT_FREE||CHR(10)||
       'INITRANS '||INI_TRANS||CHR(10)||
       'MAXTRANS '||MAX_TRANS||CHR(10)||
       'STORAGE ( '||CHR(10)||       
       DECODE(INITIAL_EXTENT,NULL,NULL,'          INITIAL '||
       DECODE(GREATEST(INITIAL_EXTENT,1024*1024),INITIAL_EXTENT,INITIAL_EXTENT/1024/1024,INITIAL_EXTENT/1024)||
       DECODE(GREATEST(INITIAL_EXTENT,1024*1024),INITIAL_EXTENT,'M','K')||CHR(10))||       
       DECODE(NEXT_EXTENT,NULL,NULL,'          NEXT '||
       DECODE(GREATEST(NEXT_EXTENT,1024*1024),NEXT_EXTENT,NEXT_EXTENT/1024/1024,NEXT_EXTENT/1024)||
       DECODE(GREATEST(NEXT_EXTENT,1024*1024),NEXT_EXTENT,'M','K')||CHR(10))||
       '          MINEXTENTS '||MIN_EXTENTS||CHR(10)||
       '          MAXEXTENTS '||MAX_EXTENTS||CHR(10)||	   
       DECODE(PCT_INCREASE,NULL,NULL,'          PCTINCREASE '||PCT_INCREASE||CHR(10))||
       '          BUFFER_POOL '||BUFFER_POOL||CHR(10)||
       '         )'||CHR(10)||
       DECODE(LOGGING,'YES','LOGGING','NO','NOLOGGING')  STORAGE_LIST
INTO   LONG_CHAR       
FROM   (SELECT DECODE(V_TNAME,B.TABLE_NAME,B.PCT_USED,C.TABLE_NAME,C.PCT_USED) PCT_USED,
               DECODE(V_TNAME,B.TABLE_NAME,B.PCT_FREE,C.TABLE_NAME,C.PCT_FREE) PCT_FREE,
               DECODE(V_TNAME,B.TABLE_NAME,B.INI_TRANS,C.TABLE_NAME,C.INI_TRANS) INI_TRANS,
               DECODE(V_TNAME,B.TABLE_NAME,B.MAX_TRANS,C.TABLE_NAME,C.MAX_TRANS) MAX_TRANS,
               DECODE(V_TNAME,B.TABLE_NAME,B.LOGGING,C.TABLE_NAME,C.LOGGING) LOGGING,
               DECODE(V_TNAME,B.TABLE_NAME,B.TABLESPACE_NAME,C.TABLE_NAME,C.TABLESPACE_NAME) TABLESPACE_NAME,
               DECODE(V_TNAME,B.TABLE_NAME,B.INITIAL_EXTENT,C.TABLE_NAME,C.INITIAL_EXTENT) INITIAL_EXTENT,
               DECODE(V_TNAME,B.TABLE_NAME,B.NEXT_EXTENT,C.TABLE_NAME,C.NEXT_EXTENT) NEXT_EXTENT,
               DECODE(V_TNAME,B.TABLE_NAME,B.MIN_EXTENT,C.TABLE_NAME,C.MIN_EXTENT) MIN_EXTENTS,
               DECODE(V_TNAME,B.TABLE_NAME,B.MAX_EXTENT,C.TABLE_NAME,C.MAX_EXTENT) MAX_EXTENTS,
               DECODE(V_TNAME,B.TABLE_NAME,B.PCT_INCREASE,C.TABLE_NAME,C.PCT_INCREASE) PCT_INCREASE,
               DECODE(V_TNAME,B.TABLE_NAME,B.FREELISTS,C.TABLE_NAME,C.FREELISTS) FREELISTS,
               DECODE(V_TNAME,B.TABLE_NAME,B.FREELIST_GROUPS,C.TABLE_NAME,C.FREELIST_GROUPS) FREELIST_GROUPS,
               DECODE(V_TNAME,B.TABLE_NAME,B.BUFFER_POOL,C.TABLE_NAME,C.BUFFER_POOL) BUFFER_POOL
        FROM   SYS.ALL_PART_TABLES X, SYS.ALL_TAB_PARTITIONS B, SYS.ALL_TAB_SUBPARTITIONS C
        WHERE  X.OWNER      = UPPER(V_OWNER)
        AND    X.OWNER      = CASE WHEN SUBPARTITIONING_TYPE  = 'NONE' THEN B.TABLE_OWNER(+) END
        AND    X.OWNER      = CASE WHEN SUBPARTITIONING_TYPE != 'NONE' THEN C.TABLE_OWNER(+) END
        AND    X.TABLE_NAME = UPPER(V_TNAME)
        AND    X.TABLE_NAME = CASE WHEN SUBPARTITIONING_TYPE  = 'NONE' THEN B.TABLE_NAME(+) END
        AND    X.TABLE_NAME = CASE WHEN SUBPARTITIONING_TYPE != 'NONE' THEN C.TABLE_NAME(+) END
        AND    UPPER(V_PNAME) = CASE WHEN SUBPARTITIONING_TYPE  = 'NONE' THEN B.PARTITION_NAME(+) END
        AND    UPPER(V_PNAME) = CASE WHEN SUBPARTITIONING_TYPE != 'NONE' THEN C.SUBPARTITION_NAME(+) END
        );

 RETURN LONG_CHAR;
END;

/
